/* Based on https://github.com/jaredlll08/MultiLoader-Template/ */

plugins {
    id 'multiloader-loader'
    id 'net.minecraftforge.gradle'
}

// All jar files from this folder will be added automatically as runtime mod dependencies (inspired by AE2's build.gradle)
def extraModsDir = "extra-mods"

repositories {
    flatDir {
        name "extra-mods"
        dir file(extraModsDir)
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:1.+"

    // Locally sourced extra mods for runtime (i.e. testing)
    for (extraModJar in fileTree(dir: extraModsDir, include: '*.jar')) {
        def basename = extraModJar.name.substring(0, extraModJar.name.length() - ".jar".length())
        def versionSep = basename.lastIndexOf('-')
        assert versionSep != -1
        def artifactId = basename.substring(0, versionSep)
        def version = basename.substring(versionSep + 1)
        runtimeOnly "extra-mods:$artifactId:$version"
    }

    // Hack to make Forge run
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

minecraft {
    mappings channel: 'official', version: minecraft_version

    reobf = false

    copyIdeResources.set(true)

    // Automatically enable neoforge AccessTransformers if the file exists
    def at = project(':loader-common').file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformer = file(at.absolutePath)
    }

    runs {
        client {
            workingDirectory file('runs/client')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            mods {
                modClientRun {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory file('runs/server')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            mods {
                modServerRun {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory file('runs/data')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            mods {
                modDataRun {
                    source sourceSets.main
                }
            }
        }
    }
}

tasks.register('signJar').configure {
    dependsOn(tasks.jar)

    onlyIf {
        System.getenv().SIGN_KEYSTORE
    }

    keyStore = System.getenv().SIGN_KEYSTORE
    alias = System.getenv().SIGN_ALIAS
    storePass = System.getenv().SIGN_STOREPASS
    keyPass = System.getenv().SIGN_KEYPASS
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

// Required because FG, copied from the MDK
sourceSets.forEach {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}
